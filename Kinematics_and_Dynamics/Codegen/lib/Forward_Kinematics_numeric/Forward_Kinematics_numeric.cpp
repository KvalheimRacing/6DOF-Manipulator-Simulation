//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: Forward_Kinematics_numeric.cpp
//
// MATLAB Coder version            : 3.3
// C/C++ source code generated on  : 16-Jul-2018 10:55:58
//

// Include Files
#include "rt_nonfinite.h"
#include "Forward_Kinematics_numeric.h"

// Function Definitions

//
// FORWARD_KINEMATICS_NUMERIC
//     FORWARD_KINEMATICS = FORWARD_KINEMATICS_NUMERIC(T1,T2,T3,T4,T5,T6)
// Arguments    : double T1
//                double T2
//                double T3
//                double T4
//                double T5
//                double T6
//                double Forward_Kinematics[16]
// Return Type  : void
//
void Forward_Kinematics_numeric(double T1, double T2, double T3, double T4,
  double T5, double T6, double Forward_Kinematics[16])
{
  double t2;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t14;
  double t19;
  double t20;
  double t21;
  double t24;
  double t28;
  double t29;
  double t30;
  double t31;
  double t32;
  double t37;
  double b_t19[16];
  int i0;
  int i1;

  //     This function was generated by the Symbolic Math Toolbox version 7.2.
  //     16-Jul-2018 10:48:28
  t2 = std::cos(T1);
  t5 = std::cos(T4);
  t6 = std::cos(T3);
  t7 = std::cos(T2 - 1.5707963267948966);
  t8 = std::sin(T3);
  t9 = std::sin(T2 - 1.5707963267948966);
  t10 = t2 * t6 * t7 - t2 * t8 * t9;
  t11 = std::sin(T1);
  t12 = std::sin(T4);
  t14 = std::cos(T6);
  t19 = t10 * t12 + t5 * t11;
  t20 = std::sin(T6);
  t21 = std::cos(T5 - 1.5707963267948966);
  t24 = std::sin(T5 - 1.5707963267948966);
  t28 = t21 * (t5 * t10 - t11 * t12) - t24 * (t2 * t6 * t9 + t2 * t7 * t8);
  t29 = std::sin(T5);
  t30 = std::cos(T2);
  t31 = std::cos(T5);
  t32 = std::sin(T2);
  t10 = t6 * t7 * t11 - t8 * t9 * t11;
  t37 = t2 * t5 - t12 * t10;
  t10 = t21 * (t2 * t12 + t5 * t10) - t24 * (t6 * t9 * t11 + t7 * t8 * t11);
  t7 = ((t8 * t30 * t31 + t6 * t31 * t32) + t5 * t6 * t29 * t30) - t5 * t8 * t29
    * t32;
  t9 = std::cos(T2 + T3);
  b_t19[0] = t19 * t20 + t14 * t28;
  b_t19[1] = -t20 * t37 + t14 * t10;
  b_t19[2] = t14 * t7 + t12 * t20 * t9;
  b_t19[3] = 0.0;
  b_t19[4] = t14 * t19 - t20 * t28;
  b_t19[5] = -t14 * t37 - t20 * t10;
  b_t19[6] = -t20 * t7 + t12 * t14 * t9;
  b_t19[7] = 0.0;
  b_t19[8] = (((-t11 * t12 * t31 + t2 * t6 * t29 * t30) - t2 * t8 * t29 * t32) +
              t2 * t5 * t6 * t31 * t32) + t2 * t5 * t8 * t30 * t31;
  b_t19[9] = (((t2 * t12 * t31 + t6 * t11 * t29 * t30) - t8 * t11 * t29 * t32) +
              t5 * t6 * t11 * t31 * t32) + t5 * t8 * t11 * t30 * t31;
  b_t19[10] = ((-t6 * t29 * t32 - t8 * t29 * t30) + t5 * t6 * t30 * t31) - t5 *
    t8 * t31 * t32;
  b_t19[11] = 0.0;
  b_t19[12] = (((((((((t11 * t12 * -0.091 + t2 * t32 * 0.22) + t2 * t6 * t32 *
                      0.1565) + t2 * t8 * t30 * 0.1565) - t11 * t12 * t31 *
                    0.228) + t2 * t5 * t6 * t32 * 0.091) + t2 * t5 * t8 * t30 *
                  0.091) + t2 * t6 * t29 * t30 * 0.228) - t2 * t8 * t29 * t32 *
                0.228) + t2 * t5 * t6 * t31 * t32 * 0.228) + t2 * t5 * t8 * t30 *
    t31 * 0.228;
  b_t19[13] = (((((((((t2 * t12 * 0.091 + t11 * t32 * 0.22) + t2 * t12 * t31 *
                      0.228) + t6 * t11 * t32 * 0.1565) + t8 * t11 * t30 *
                    0.1565) + t5 * t6 * t11 * t32 * 0.091) + t5 * t8 * t11 * t30
                  * 0.091) + t6 * t11 * t29 * t30 * 0.228) - t8 * t11 * t29 *
                t32 * 0.228) + t5 * t6 * t11 * t31 * t32 * 0.228) + t5 * t8 *
    t11 * t30 * t31 * 0.228;
  b_t19[14] = ((((((((t30 * 0.22 + t6 * t30 * 0.1565) - t8 * t32 * 0.1565) + t5 *
                    t6 * t30 * 0.091) - t5 * t8 * t32 * 0.091) - t6 * t29 * t32 *
                  0.228) - t8 * t29 * t30 * 0.228) + t5 * t6 * t30 * t31 * 0.228)
               - t5 * t8 * t31 * t32 * 0.228) + 0.108;
  b_t19[15] = 1.0;
  for (i0 = 0; i0 < 4; i0++) {
    for (i1 = 0; i1 < 4; i1++) {
      Forward_Kinematics[i1 + (i0 << 2)] = b_t19[i1 + (i0 << 2)];
    }
  }
}

//
// File trailer for Forward_Kinematics_numeric.cpp
//
// [EOF]
//
