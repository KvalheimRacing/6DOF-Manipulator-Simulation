//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: Forward_Kinematics.cpp
//
// MATLAB Coder version            : 3.3
// C/C++ source code generated on  : 16-Jul-2018 10:36:23
//

// Include Files
#include "rt_nonfinite.h"
#include "Forward_Kinematics.h"

// Function Definitions

//
// FORWARD_KINEMATICS
//     FORWARD_KINEMATICS = FORWARD_KINEMATICS(L1,L2,L3,L4,L5,L6,T1,T2,T3,T4,T5,T6)
// Arguments    : double L1
//                double L2
//                double L3
//                double L4
//                double L5
//                double L6
//                double T1
//                double T2
//                double T3
//                double T4
//                double T5
//                double T6
//                double b_Forward_Kinematics[16]
// Return Type  : void
//
void Forward_Kinematics(double L1, double L2, double L3, double L4, double L5,
  double L6, double T1, double T2, double T3, double T4, double T5, double T6,
  double b_Forward_Kinematics[16])
{
  double t2;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t14;
  double t19;
  double t20;
  double t21;
  double t24;
  double t28;
  double t29;
  double t30;
  double t31;
  double t32;
  double t36;
  double t41;
  double t57;
  double t61;
  double b_t19[16];
  int i0;
  int i1;

  //     This function was generated by the Symbolic Math Toolbox version 7.2.
  //     10-Jul-2018 14:19:34
  t2 = std::cos(T1);
  t5 = std::cos(T4);
  t6 = std::cos(T3);
  t7 = std::cos(T2 - 1.5707963267948966);
  t8 = std::sin(T3);
  t9 = std::sin(T2 - 1.5707963267948966);
  t10 = t2 * t6 * t7 - t2 * t8 * t9;
  t11 = std::sin(T1);
  t12 = std::sin(T4);
  t14 = std::cos(T6);
  t19 = t10 * t12 + t5 * t11;
  t20 = std::sin(T6);
  t21 = std::cos(T5 - 1.5707963267948966);
  t24 = std::sin(T5 - 1.5707963267948966);
  t28 = t21 * (t5 * t10 - t11 * t12) - t24 * (t2 * t6 * t9 + t2 * t7 * t8);
  t29 = std::sin(T5);
  t30 = std::cos(T2);
  t31 = std::cos(T5);
  t32 = std::sin(T2);
  t36 = (((t2 * t6 * t29 * t30 + t2 * t5 * t8 * t30 * t31) + t2 * t5 * t6 * t31 *
          t32) - t11 * t12 * t31) - t2 * t8 * t29 * t32;
  t10 = t6 * t7 * t11 - t8 * t9 * t11;
  t41 = t2 * t5 - t12 * t10;
  t9 = t21 * (t2 * t12 + t5 * t10) - t24 * (t6 * t9 * t11 + t7 * t8 * t11);
  t21 = L5 + L6;
  t24 = (((t2 * t12 * t31 + t6 * t11 * t29 * t30) + t5 * t8 * t11 * t30 * t31) +
         t5 * t6 * t11 * t31 * t32) - t8 * t11 * t29 * t32;
  t10 = T2 + T3;
  t57 = std::sin(t10);
  t61 = ((t8 * t30 * t31 + t6 * t31 * t32) + t5 * t6 * t29 * t30) - t5 * t8 *
    t29 * t32;
  t10 = std::cos(t10);
  t7 = t5 * t6 * t30 * t31;
  b_t19[0] = t19 * t20 + t14 * t28;
  b_t19[1] = -t20 * t41 + t14 * t9;
  b_t19[2] = t14 * t61 + t12 * t20 * t10;
  b_t19[3] = 0.0;
  b_t19[4] = t14 * t19 - t20 * t28;
  b_t19[5] = -t14 * t41 - t20 * t9;
  b_t19[6] = -t20 * t61 + t12 * t14 * t10;
  b_t19[7] = 0.0;
  b_t19[8] = t36;
  b_t19[9] = t24;
  b_t19[10] = ((t7 - t6 * t29 * t32) - t8 * t29 * t30) - t5 * t8 * t31 * t32;
  b_t19[11] = 0.0;
  b_t19[12] = ((((t36 * t21 - L4 * t11 * t12) + L2 * t2 * t32) + L3 * t2 * t6 *
                t32) + L3 * t2 * t8 * t30) + L4 * t2 * t5 * t57;
  b_t19[13] = ((((t21 * t24 + L4 * t2 * t12) + L2 * t11 * t32) + L3 * t6 * t11 *
                t32) + L3 * t8 * t11 * t30) + L4 * t5 * t11 * t57;
  b_t19[14] = ((((L1 + L2 * t30) - t21 * (((-t7 + t6 * t29 * t32) + t8 * t29 *
    t30) + t5 * t8 * t31 * t32)) + L3 * t6 * t30) - L3 * t8 * t32) + L4 * t5 *
    t10;
  b_t19[15] = 1.0;
  for (i0 = 0; i0 < 4; i0++) {
    for (i1 = 0; i1 < 4; i1++) {
      b_Forward_Kinematics[i1 + (i0 << 2)] = b_t19[i1 + (i0 << 2)];
    }
  }
}

//
// File trailer for Forward_Kinematics.cpp
//
// [EOF]
//
