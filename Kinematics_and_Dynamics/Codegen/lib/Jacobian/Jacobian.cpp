//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: Jacobian.cpp
//
// MATLAB Coder version            : 3.3
// C/C++ source code generated on  : 16-Jul-2018 10:33:22
//

// Include Files
#include "rt_nonfinite.h"
#include "Jacobian.h"

// Function Definitions

//
// JACOBIAN
//     JACOBIAN = JACOBIAN(L2,L3,L4,L5,L6,T1,T2,T3,T4,T5)
// Arguments    : double L2
//                double L3
//                double L4
//                double L5
//                double L6
//                double T1
//                double T2
//                double T3
//                double T4
//                double T5
//                double b_Jacobian[36]
// Return Type  : void
//
void Jacobian(double L2, double L3, double L4, double L5, double L6, double T1,
              double T2, double T3, double T4, double T5, double b_Jacobian[36])
{
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t23;
  double t17;
  double t18;
  double t19;
  double t20;
  double t25;
  double t26;
  double t24;
  double t29;
  double t30;
  double t31;
  double t32;
  double t33;
  double t34;
  double t38;
  double t39;
  double t40;
  double t45;
  double b_t12[36];
  int i0;
  int i1;

  //     This function was generated by the Symbolic Math Toolbox version 7.2.
  //     10-Jul-2018 14:19:39
  t2 = std::sin(T1);
  t3 = std::sin(T5);
  t4 = std::cos(T2);
  t5 = std::cos(T5);
  t6 = std::sin(T3);
  t7 = std::cos(T3);
  t8 = std::cos(T4);
  t9 = std::sin(T2);
  t10 = std::cos(T1);
  t11 = std::sin(T4);
  t12 = L5 + L6;
  t13 = T2 + T3;
  t14 = t3 * t4 * t6;
  t15 = t3 * t7 * t9;
  t16 = t5 * t6 * t8 * t9;
  t23 = t4 * t5 * t7 * t8;
  t17 = ((t14 + t15) + t16) - t23;
  t18 = L3 * t4 * t7;
  t19 = std::cos(t13);
  t20 = L4 * t8 * t19;
  t13 = std::sin(t13);
  t25 = t12 * t17;
  t26 = L3 * t6 * t9;
  t24 = (((t18 + t20) + L2 * t4) - t25) - t26;
  t29 = (L4 + L5 * t5) + L6 * t5;
  t30 = L5 * t3 * t6 * t9;
  t31 = L6 * t3 * t6 * t9;
  t32 = t2 * t8;
  t33 = t4 * t6 * t10 * t11;
  t34 = t7 * t9 * t10 * t11;
  t38 = (((t3 * t4 * t7 * t10 + t4 * t5 * t6 * t8 * t10) + t5 * t7 * t8 * t9 *
          t10) - t2 * t5 * t11) - t3 * t6 * t9 * t10;
  t39 = t2 * t4 * t6 * t11;
  t40 = t2 * t7 * t9 * t11;
  t45 = (((t5 * t10 * t11 + t2 * t3 * t4 * t7) + t2 * t4 * t5 * t6 * t8) + t2 *
         t5 * t7 * t8 * t9) - t2 * t3 * t6 * t9;
  b_t12[0] = ((((-t12 * t45 - L2 * t2 * t9) - L4 * t10 * t11) - L3 * t2 * t4 *
               t6) - L3 * t2 * t7 * t9) - L4 * t2 * t8 * t13;
  b_t12[1] = ((((t12 * t38 - L4 * t2 * t11) + L2 * t9 * t10) + L3 * t4 * t6 *
               t10) + L3 * t7 * t9 * t10) + L4 * t8 * t10 * t13;
  b_t12[2] = 0.0;
  b_t12[3] = 0.0;
  b_t12[4] = 0.0;
  b_t12[5] = 1.0;
  b_t12[6] = t10 * t24;
  b_t12[7] = t2 * t24;
  b_t12[8] = (((((((((((t30 + t31) - L2 * t9) - L3 * t4 * t6) - L3 * t7 * t9) -
                    L5 * t3 * t4 * t7) - L6 * t3 * t4 * t7) - L4 * t4 * t6 * t8)
                 - L4 * t7 * t8 * t9) - L5 * t4 * t5 * t6 * t8) - L6 * t4 * t5 *
               t6 * t8) - L5 * t5 * t7 * t8 * t9) - L6 * t5 * t7 * t8 * t9;
  b_t12[9] = -t2;
  b_t12[10] = t10;
  b_t12[11] = 0.0;
  b_t12[12] = t10 * (((t18 + t20) - t12 * t17) - L3 * t6 * t9);
  b_t12[13] = t2 * (((t18 + t20) - t25) - t26);
  b_t12[14] = ((((((((((t30 + t31) - L3 * t4 * t6) - L3 * t7 * t9) - L5 * t3 *
                     t4 * t7) - L6 * t3 * t4 * t7) - L4 * t4 * t6 * t8) - L4 *
                  t7 * t8 * t9) - L5 * t4 * t5 * t6 * t8) - L6 * t4 * t5 * t6 *
                t8) - L5 * t5 * t7 * t8 * t9) - L6 * t5 * t7 * t8 * t9;
  b_t12[15] = -t2;
  b_t12[16] = t10;
  b_t12[17] = 0.0;
  b_t12[18] = -t29 * ((t32 + t33) + t34);
  b_t12[19] = -t29 * ((t39 + t40) - t8 * t10);
  b_t12[20] = -t11 * t19 * t29;
  b_t12[21] = -t10 * t19;
  b_t12[22] = -t2 * t19;
  b_t12[23] = t13;
  b_t12[24] = -t12 * ((((-t2 * t3 * t11 - t4 * t5 * t7 * t10) + t5 * t6 * t9 *
                        t10) + t3 * t4 * t6 * t8 * t10) + t3 * t7 * t8 * t9 *
                      t10);
  b_t12[25] = -t12 * ((((t3 * t10 * t11 - t2 * t4 * t5 * t7) + t2 * t5 * t6 * t9)
                       + t2 * t3 * t4 * t6 * t8) + t2 * t3 * t7 * t8 * t9);
  b_t12[26] = -t12 * (((t4 * t5 * t6 + t5 * t7 * t9) + t3 * t4 * t7 * t8) - t3 *
                      t6 * t8 * t9);
  b_t12[27] = (-t32 - t33) - t34;
  b_t12[28] = (-t39 - t40) + t8 * t10;
  b_t12[29] = -t11 * t19;
  b_t12[30] = 0.0;
  b_t12[31] = 0.0;
  b_t12[32] = 0.0;
  b_t12[33] = t38;
  b_t12[34] = t45;
  b_t12[35] = ((-t14 - t15) - t16) + t23;
  for (i0 = 0; i0 < 6; i0++) {
    for (i1 = 0; i1 < 6; i1++) {
      b_Jacobian[i1 + 6 * i0] = b_t12[i1 + 6 * i0];
    }
  }
}

//
// File trailer for Jacobian.cpp
//
// [EOF]
//
