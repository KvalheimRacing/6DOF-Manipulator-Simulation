//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: Jacobian_numeric.cpp
//
// MATLAB Coder version            : 3.3
// C/C++ source code generated on  : 16-Jul-2018 10:57:39
//

// Include Files
#include "rt_nonfinite.h"
#include "Jacobian_numeric.h"

// Function Definitions

//
// JACOBIAN_NUMERIC
//     JACOBIAN = JACOBIAN_NUMERIC(T1,T2,T3,T4,T5)
// Arguments    : double T1
//                double T2
//                double T3
//                double T4
//                double T5
//                double Jacobian[36]
// Return Type  : void
//
void Jacobian_numeric(double T1, double T2, double T3, double T4, double T5,
                      double Jacobian[36])
{
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t18;
  double t19;
  double t20;
  double t17;
  double t22;
  double t23;
  double t24;
  double t25;
  double t26;
  double t27;
  double t28;
  double t29;
  double t30;
  double b_t2[36];
  int i0;
  int i1;

  //     This function was generated by the Symbolic Math Toolbox version 7.2.
  //     16-Jul-2018 10:48:36
  t2 = std::cos(T1);
  t3 = std::sin(T4);
  t4 = std::sin(T1);
  t5 = std::sin(T2);
  t6 = std::cos(T2);
  t7 = std::sin(T3);
  t8 = std::cos(T3);
  t9 = std::cos(T4);
  t10 = std::sin(T5);
  t11 = std::cos(T5);
  t12 = t5 * t7 * 0.1565;
  t13 = t5 * t7 * t9 * 0.091;
  t14 = t6 * t7 * t10 * 0.228;
  t15 = t5 * t8 * t10 * 0.228;
  t16 = t5 * t7 * t9 * t11 * 0.228;
  t18 = t6 * t8 * 0.1565;
  t19 = t6 * t8 * t9 * 0.091;
  t20 = t6 * t8 * t9 * t11 * 0.228;
  t17 = (((((((t6 * -0.22 + t12) + t13) + t14) + t15) + t16) - t18) - t19) - t20;
  t22 = t11 * 228.0 + 91.0;
  t23 = t5 * t7 * t10 * 0.228;
  t24 = T2 + T3;
  t25 = std::cos(t24);
  t26 = t4 * t9;
  t27 = t2 * t3 * t6 * t7;
  t28 = t2 * t3 * t5 * t8;
  t29 = t3 * t4 * t6 * t7;
  t30 = t3 * t4 * t5 * t8;
  b_t2[0] = (((((((((t2 * t3 * -0.091 - t4 * t5 * 0.22) - t2 * t3 * t11 * 0.228)
                   - t4 * t5 * t8 * 0.1565) - t4 * t6 * t7 * 0.1565) + t4 * t5 *
                 t7 * t10 * 0.228) - t4 * t5 * t8 * t9 * 0.091) - t4 * t6 * t7 *
               t9 * 0.091) - t4 * t6 * t8 * t10 * 0.228) - t4 * t5 * t8 * t9 *
             t11 * 0.228) - t4 * t6 * t7 * t9 * t11 * 0.228;
  b_t2[1] = (((((((((t2 * t5 * 0.22 - t3 * t4 * 0.091) + t2 * t5 * t8 * 0.1565)
                   + t2 * t6 * t7 * 0.1565) - t3 * t4 * t11 * 0.228) - t2 * t5 *
                 t7 * t10 * 0.228) + t2 * t5 * t8 * t9 * 0.091) + t2 * t6 * t7 *
               t9 * 0.091) + t2 * t6 * t8 * t10 * 0.228) + t2 * t5 * t8 * t9 *
             t11 * 0.228) + t2 * t6 * t7 * t9 * t11 * 0.228;
  b_t2[2] = 0.0;
  b_t2[3] = 0.0;
  b_t2[4] = 0.0;
  b_t2[5] = 1.0;
  b_t2[6] = -t2 * t17;
  b_t2[7] = -t4 * t17;
  b_t2[8] = (((((((t5 * -0.22 + t23) - t5 * t8 * 0.1565) - t6 * t7 * 0.1565) -
                t5 * t8 * t9 * 0.091) - t6 * t7 * t9 * 0.091) - t6 * t8 * t10 *
              0.228) - t5 * t8 * t9 * t11 * 0.228) - t6 * t7 * t9 * t11 * 0.228;
  b_t2[9] = -t4;
  b_t2[10] = t2;
  b_t2[11] = 0.0;
  b_t2[12] = -t2 * (((((((t12 + t13) + t14) + t15) + t16) - t6 * t8 * 0.1565) -
                     t6 * t8 * t9 * 0.091) - t6 * t8 * t9 * t11 * 0.228);
  b_t2[13] = -t4 * (((((((t12 + t13) + t14) + t15) + t16) - t18) - t19) - t20);
  b_t2[14] = ((((((t23 - t5 * t8 * 0.1565) - t6 * t7 * 0.1565) - t5 * t8 * t9 *
                 0.091) - t6 * t7 * t9 * 0.091) - t6 * t8 * t10 * 0.228) - t5 *
              t8 * t9 * t11 * 0.228) - t6 * t7 * t9 * t11 * 0.228;
  b_t2[15] = -t4;
  b_t2[16] = t2;
  b_t2[17] = 0.0;
  b_t2[18] = t22 * ((t26 + t27) + t28) * -0.001;
  b_t2[19] = t22 * ((t29 + t30) - t2 * t9) * -0.001;
  b_t2[20] = t3 * t22 * t25 * -0.001;
  b_t2[21] = -t2 * t25;
  b_t2[22] = -t4 * t25;
  b_t2[23] = std::sin(t24);
  b_t2[24] = (((t3 * t4 * t10 * 0.228 - t2 * t5 * t7 * t11 * 0.228) + t2 * t6 *
               t8 * t11 * 0.228) - t2 * t5 * t8 * t9 * t10 * 0.228) - t2 * t6 *
    t7 * t9 * t10 * 0.228;
  b_t2[25] = (((t2 * t3 * t10 * -0.228 - t4 * t5 * t7 * t11 * 0.228) + t4 * t6 *
               t8 * t11 * 0.228) - t4 * t5 * t8 * t9 * t10 * 0.228) - t4 * t6 *
    t7 * t9 * t10 * 0.228;
  b_t2[26] = ((t5 * t8 * t11 * -0.228 - t6 * t7 * t11 * 0.228) + t5 * t7 * t9 *
              t10 * 0.228) - t6 * t8 * t9 * t10 * 0.228;
  b_t2[27] = (-t26 - t27) - t28;
  b_t2[28] = (-t29 - t30) + t2 * t9;
  b_t2[29] = -t3 * t25;
  b_t2[30] = 0.0;
  b_t2[31] = 0.0;
  b_t2[32] = 0.0;
  b_t2[33] = (((-t3 * t4 * t11 - t2 * t5 * t7 * t10) + t2 * t6 * t8 * t10) + t2 *
              t5 * t8 * t9 * t11) + t2 * t6 * t7 * t9 * t11;
  b_t2[34] = (((t2 * t3 * t11 - t4 * t5 * t7 * t10) + t4 * t6 * t8 * t10) + t4 *
              t5 * t8 * t9 * t11) + t4 * t6 * t7 * t9 * t11;
  b_t2[35] = ((-t5 * t8 * t10 - t6 * t7 * t10) - t5 * t7 * t9 * t11) + t6 * t8 *
    t9 * t11;
  for (i0 = 0; i0 < 6; i0++) {
    for (i1 = 0; i1 < 6; i1++) {
      Jacobian[i1 + 6 * i0] = b_t2[i1 + 6 * i0];
    }
  }
}

//
// File trailer for Jacobian_numeric.cpp
//
// [EOF]
//
